# Diagnostic Dockerfile to check Railway's build environment
FROM node:20-alpine

RUN apk add --no-cache libc6-compat bash procps

WORKDIR /app

# Create a diagnostic script
RUN cat > /app/check-limits.sh << 'EOF'
#!/bin/bash
echo "=== Railway Build Environment Diagnostics ==="
echo "Date: $(date)"
echo ""
echo "=== Memory Information ==="
free -h 2>/dev/null || echo "free command not available"
echo ""
echo "=== Process Limits ==="
ulimit -a
echo ""
echo "=== CPU Information ==="
nproc
cat /proc/cpuinfo | grep "model name" | head -1
echo ""
echo "=== Container Limits ==="
cat /sys/fs/cgroup/memory/memory.limit_in_bytes 2>/dev/null || echo "Memory cgroup v1 not available"
cat /sys/fs/cgroup/memory.max 2>/dev/null || echo "Memory cgroup v2 not available"
echo ""
echo "=== Node.js Memory Test ==="
node -e "console.log('Node max heap size:', require('v8').getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB')"
echo ""
echo "=== Testing Memory Allocation ==="
node --max-old-space-size=4096 -e "
  console.log('Attempting to allocate 4GB heap...');
  const v8 = require('v8');
  console.log('Heap limit:', v8.getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB');
  console.log('Initial heap:', v8.getHeapStatistics().used_heap_size / 1024 / 1024, 'MB');
  
  // Try to allocate some memory
  const arrays = [];
  try {
    for (let i = 0; i < 10; i++) {
      arrays.push(new Array(100 * 1024 * 1024)); // 100MB per array
      console.log(\`Allocated \${(i + 1) * 100}MB\`);
    }
    console.log('Successfully allocated 1GB');
  } catch (e) {
    console.log('Memory allocation failed at:', arrays.length * 100, 'MB');
    console.log('Error:', e.message);
  }
"
EOF

RUN chmod +x /app/check-limits.sh

# Copy package files to test actual build memory usage
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies to see memory usage
RUN echo "=== Installing Dependencies ===" && \
    /app/check-limits.sh && \
    echo "" && \
    echo "=== NPM Install ===" && \
    npm ci

# Test Prisma generation
RUN echo "=== Generating Prisma Client ===" && \
    node --max-old-space-size=4096 -e "console.log('Heap limit:', require('v8').getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB')" && \
    npm run prisma:generate

# Copy source files
COPY . .

# Run diagnostics before build
RUN echo "=== Pre-Build Diagnostics ===" && \
    /app/check-limits.sh

# Attempt build with diagnostics
RUN echo "=== Attempting Next.js Build ===" && \
    node --max-old-space-size=4096 -e "
      const v8 = require('v8');
      console.log('Build heap limit:', v8.getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB');
    " && \
    NODE_OPTIONS="--max-old-space-size=4096" npm run build || \
    (echo "Build failed, checking final state..." && /app/check-limits.sh && exit 1)

# If we get here, build succeeded
RUN echo "=== BUILD SUCCESSFUL ===" && \
    echo "Build completed with 4GB heap allocation"

CMD ["node", "--version"]