'use client'

import { useCallback } from 'react'
import html2canvas from 'html2canvas'
import { ArrowDownTrayIcon, ShareIcon } from '@/lib/icons'
import { MapDataType, ElectionYear } from '@/types/mapping'
import toast from 'react-hot-toast'

interface ExportControlsProps {
  mapElementId: string
  dataType: MapDataType
  fromYear?: ElectionYear
  toYear?: ElectionYear
}

export default function ExportControls({
  mapElementId,
  dataType,
  fromYear,
  toYear
}: ExportControlsProps) {
  const exportMapToPNG = useCallback(async () => {
    const mapElement = document.getElementById(mapElementId)
    if (!mapElement) {
      toast.error('Map element not found')
      return
    }

    try {
      toast.loading('Generating map export...')
      
      // Create a container for the export
      const exportContainer = document.createElement('div')
      exportContainer.style.width = '1200px'
      exportContainer.style.height = '630px'
      exportContainer.style.position = 'absolute'
      exportContainer.style.left = '-9999px'
      exportContainer.style.backgroundColor = '#ffffff'
      document.body.appendChild(exportContainer)

      // Clone the map
      const mapClone = mapElement.cloneNode(true) as HTMLElement
      mapClone.style.width = '100%'
      mapClone.style.height = '500px'
      exportContainer.appendChild(mapClone)

      // Add header with Akashic branding
      const header = document.createElement('div')
      header.style.padding = '20px'
      header.style.borderBottom = '1px solid #e5e7eb'
      header.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between;">
          <div>
            <h1 style="font-size: 24px; font-weight: bold; color: #111827; margin: 0;">
              ${dataType === 'election' ? `${fromYear}-${toYear} Presidential Election Swing Analysis` : 'County Demographics'}
            </h1>
            <p style="font-size: 14px; color: #6b7280; margin: 5px 0 0 0;">
              Generated by Akashic Intelligence Campaign Console
            </p>
          </div>
          <div style="text-align: right;">
            <div style="font-size: 20px; font-weight: bold; color: #2563eb;">
              Akashic Intelligence
            </div>
            <div style="font-size: 12px; color: #6b7280;">
              www.akashic.com
            </div>
          </div>
        </div>
      `
      exportContainer.insertBefore(header, mapClone)

      // Add footer
      const footer = document.createElement('div')
      footer.style.padding = '15px 20px'
      footer.style.borderTop = '1px solid #e5e7eb'
      footer.style.fontSize = '12px'
      footer.style.color = '#6b7280'
      footer.style.textAlign = 'center'
      footer.innerHTML = `Data visualization powered by Akashic Intelligence's 132-year historical election dataset`
      exportContainer.appendChild(footer)

      // Generate canvas
      const canvas = await html2canvas(exportContainer, {
        width: 1200,
        height: 630,
        scale: 2,
        backgroundColor: '#ffffff',
        logging: false
      })

      // Clean up
      document.body.removeChild(exportContainer)

      // Convert to blob
      canvas.toBlob((blob) => {
        if (!blob) {
          toast.error('Failed to generate image')
          return
        }

        // Create download link
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `akashic-${dataType}-map-${fromYear || 'demographics'}-${toYear || ''}.png`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)

        toast.dismiss()
        toast.success('Map exported successfully!')
      }, 'image/png')
    } catch (error) {
      console.error('Export error:', error)
      toast.dismiss()
      toast.error('Failed to export map')
    }
  }, [mapElementId, dataType, fromYear, toYear])

  const shareMap = useCallback(async () => {
    // For social sharing, we'd typically upload the image to a CDN
    // and generate a shareable URL. For now, we'll just export the image.
    await exportMapToPNG()
    toast.success('Download the image to share on social media!')
  }, [exportMapToPNG])

  return (
    <div className="flex space-x-2">
      <button
        onClick={shareMap}
        className="btn-secondary inline-flex items-center gap-2 text-sm"
      >
        <ShareIcon className="h-4 w-4" />
        Social Share PNG
      </button>
      <button
        onClick={exportMapToPNG}
        className="btn-secondary inline-flex items-center gap-2 text-sm"
      >
        <ArrowDownTrayIcon className="h-4 w-4" />
        Download Map
      </button>
    </div>
  )
}