// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CANDIDATE
  CAMPAIGN_MANAGER
  COMMUNICATIONS_DIRECTOR
  FIELD_DIRECTOR
  FINANCE_DIRECTOR
  VOLUNTEER
  ADMIN
}

enum MessageStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum Platform {
  EMAIL
  FACEBOOK
  TWITTER
  INSTAGRAM
  PRESS_RELEASE
  WEBSITE
  SMS
}

enum ApprovalTier {
  GREEN
  YELLOW
  RED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  role            UserRole         @default(USER)
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  accounts        Account[]
  sessions        Session[]
  campaigns       CampaignMember[]
  messages        Message[]        @relation("MessageAuthor")
  messageVersions MessageVersion[]
  approvals       Approval[]
  activities      Activity[]
  templates       MessageTemplate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id               String           @id @default(cuid())
  name             String
  description      String?
  candidateName    String
  office           String
  district         String?
  party            String?
  electionDate     DateTime?
  
  // Campaign profile (comprehensive candidate data)
  profile          Json?
  
  // Version Control profiles
  versionProfiles  Json?
  
  // Campaign settings
  settings         Json?
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  members          CampaignMember[]
  messages         Message[]
  teams            Team[]
  activities       Activity[]
  templates        MessageTemplate[]
}

model CampaignMember {
  id         String    @id @default(cuid())
  userId     String
  campaignId String
  role       UserRole
  permissions Json?     // Custom permissions override
  joinedAt   DateTime  @default(now())
  
  user       User      @relation(fields: [userId], references: [id])
  campaign   Campaign  @relation(fields: [campaignId], references: [id])
  
  @@unique([userId, campaignId])
}

model Team {
  id          String   @id @default(cuid())
  campaignId  String
  name        String
  description String?
  createdAt   DateTime @default(now())
  
  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model Message {
  id              String           @id @default(cuid())
  campaignId      String
  authorId        String
  title           String
  content         String           @db.Text
  platform        Platform
  status          MessageStatus    @default(DRAFT)
  
  // Scheduling
  scheduledFor    DateTime?
  publishedAt     DateTime?
  
  // AI Generation metadata
  aiGenerated     Boolean          @default(false)
  aiPrompt        String?          @db.Text
  
  // Approval routing
  approvalTier    ApprovalTier?
  approvalAnalysis Json?
  
  // Performance metrics
  metrics         Json?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  campaign        Campaign         @relation(fields: [campaignId], references: [id])
  author          User             @relation("MessageAuthor", fields: [authorId], references: [id])
  versions        MessageVersion[]
  approvals       Approval[]
  publishHistory  PublishRecord[]
}

model MessageVersion {
  id              String    @id @default(cuid())
  messageId       String
  versionProfile  String    // Version profile ID (e.g., "union", "chamber", "youth")
  content         String    @db.Text
  createdById     String
  createdAt       DateTime  @default(now())
  
  message         Message   @relation(fields: [messageId], references: [id])
  createdBy       User      @relation(fields: [createdById], references: [id])
}

model Approval {
  id              String    @id @default(cuid())
  messageId       String
  approvedById    String
  status          String    // APPROVED, REJECTED, CHANGES_REQUESTED
  comments        String?   @db.Text
  createdAt       DateTime  @default(now())
  
  message         Message   @relation(fields: [messageId], references: [id])
  approvedBy      User      @relation(fields: [approvedById], references: [id])
}

model PublishRecord {
  id              String    @id @default(cuid())
  messageId       String
  platform        Platform
  publishedAt     DateTime  @default(now())
  externalId      String?   // Platform-specific ID
  status          String    // SUCCESS, FAILED, PENDING
  metadata        Json?     // Platform-specific data
  
  message         Message   @relation(fields: [messageId], references: [id])
}

model Activity {
  id              String    @id @default(cuid())
  campaignId      String
  userId          String
  type            String    // MESSAGE_CREATED, MESSAGE_APPROVED, etc.
  description     String
  metadata        Json?
  createdAt       DateTime  @default(now())
  
  campaign        Campaign  @relation(fields: [campaignId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([campaignId, createdAt])
}

model MessageTemplate {
  id              String    @id @default(cuid())
  campaignId      String?   // Null for global templates
  createdById     String
  name            String
  description     String?
  content         String    @db.Text
  platform        Platform
  category        String    // fundraising, announcement, thank-you, etc.
  isGlobal        Boolean   @default(false)
  usageCount      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  campaign        Campaign? @relation(fields: [campaignId], references: [id])
  createdBy       User      @relation(fields: [createdById], references: [id])
  
  @@index([campaignId, category])
}

// Election Mapping Models

model County {
  fipsCode          String              @id
  countyName        String
  stateName         String
  stateAbbr         String              @db.VarChar(2)
  americanNationRegion String?
  geometry          Json?               // GeoJSON for county boundaries
  centroidLat       Decimal?            @db.Decimal(10, 8)
  centroidLng       Decimal?            @db.Decimal(11, 8)
  createdAt         DateTime            @default(now())
  
  electionResults   CountyElectionResult?
  demographics      CountyDemographic[]
  
  @@index([stateAbbr])
}

model CountyElectionResult {
  id                String              @id @default(cuid())
  countyFips        String              @unique
  countyName        String
  stateAbbr         String              @db.VarChar(2)
  stateName         String
  
  // Election results stored as JSON for flexible schema
  // Format: { "1892": { "D": 1234, "R": 5678, "O": 90, "T": 7002 }, ... }
  electionData      Json
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  county            County              @relation(fields: [countyFips], references: [fipsCode])
  
  @@index([stateAbbr])
  @@index([countyFips])
}

model CountyDemographic {
  id                      String              @id @default(cuid())
  countyFips              String
  dataYear                Int
  population              Int?
  medianAge               Decimal?            @db.Decimal(4, 1)
  medianHouseholdIncome   Int?
  povertyRate             Decimal?            @db.Decimal(5, 2)
  unemploymentRate        Decimal?            @db.Decimal(5, 2)
  collegeDegreeRate       Decimal?            @db.Decimal(5, 2)
  whitePercentage         Decimal?            @db.Decimal(5, 2)
  blackPercentage         Decimal?            @db.Decimal(5, 2)
  hispanicPercentage      Decimal?            @db.Decimal(5, 2)
  asianPercentage         Decimal?            @db.Decimal(5, 2)
  otherRacePercentage     Decimal?            @db.Decimal(5, 2)
  populationDensity       Decimal?            @db.Decimal(10, 2)
  urbanPercentage         Decimal?            @db.Decimal(5, 2)
  englishOnlyPercentage   Decimal?            @db.Decimal(5, 2)
  spanishHomePercentage   Decimal?            @db.Decimal(5, 2)
  otherLanguagePercentage Decimal?            @db.Decimal(5, 2)
  voterTurnoutRate        Decimal?            @db.Decimal(5, 2)
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  
  county                  County              @relation(fields: [countyFips], references: [fipsCode])
  
  @@unique([countyFips, dataYear])
  @@index([countyFips])
  @@index([dataYear])
}