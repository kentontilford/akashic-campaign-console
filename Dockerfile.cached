# Multi-stage Dockerfile with aggressive caching for Railway
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy only package files for dependency caching
COPY package.json package-lock.json ./
COPY prisma ./prisma/

# Install dependencies (this layer will be cached)
RUN npm ci --only=production
RUN cp -R node_modules prod_node_modules
RUN npm ci

# Generate Prisma client (cached unless schema changes)
RUN npm run prisma:generate

# Builder stage
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy cached dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/prod_node_modules ./prod_node_modules

# Copy source files
COPY . .

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1

# Create .next/cache directory structure for build cache
RUN mkdir -p .next/cache

# Build with memory allocation and cache
RUN NODE_OPTIONS="--max-old-space-size=4096" \
    NEXT_BUILD_CACHE=true \
    npm run build

# Production image
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy production dependencies
COPY --from=builder /app/prod_node_modules ./node_modules

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Copy Prisma schema for runtime
COPY --from=builder /app/prisma ./prisma

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]